/*
DESCRIPTION:
	This U-SQL script process 2 files containing movies rating informations 
	(downloadable from https://grouplens.org/datasets/movielens/):
		- u.data - tab separated file that contains 100 000 movies ratings (user id, movie id, rating, timestamp)
		- u.item - pipe separated file that contains general movies info (movie id, title, release date, 
					genres, ...)
	Script process files in a way that it calculates avg. ratings for movies (from u.data) and combines 
	this with movies general informations (from u.item)	producing comma separated file 
	(moveisInfoWithRatings.csv) that contains combined data.
*/

REFERENCE ASSEMBLY master.PopularMoviesCommon;

USING x = PopularMoviesCommon.Helpers.CustomFunctions;

DECLARE EXTERNAL @intervalBasedSubdir string = "";
DECLARE @movieRatingsFilePath = "/moviesdata/onpremisesdata/" + @intervalBasedSubdir + "u.data";
DECLARE @movieDataFilePath = "/moviesdata/onpremisesdata/" + @intervalBasedSubdir + "u.item";
DECLARE @moviesRatingOutputFilePath = "/moviesdata/outputdata/" + @intervalBasedSubdir + "moviesInfoWithRatings.csv";

/* 
=========================================================================================================
PART I: Extract and transform movie ratings file (u.data)
=========================================================================================================
*/ 

// extract all ratings data from file
@moviesRatings =
    EXTRACT UserId int,
            MovieId int,
            Rating int,
			Timestamp double
    FROM @movieRatingsFilePath
    USING Extractors.Tsv();

// count ratings and calculate average rating per movie (notice SQL-like syntax)
@ratingsCountPerMovie =
    SELECT MovieId,
           COUNT(*) AS NumberOfRatings,
		   AVG((decimal) Rating) AS AvgRating
    FROM @moviesRatings
    GROUP BY MovieId;

// rowset can be refined - here we round avg. rating (notice .NET Math.Round)
@ratingsCountPerMovie =
    SELECT MovieId,
           NumberOfRatings,
           Math.Round((decimal)AvgRating, 2) AS AvgRating
    FROM @ratingsCountPerMovie;

/* 
=========================================================================================================
PART II: Extract movies info file (u.item) using custom implemented extractor with colDelim parameter
=========================================================================================================
*/ 

//extract movies info
@moviesInfo =
    EXTRACT MovieId int,
            Title string,
            ReleaseDate DateTime,
            VideoReleaseDate DateTime?,
            IMDbURL string,
            GenreUnknown bool,
            GenreAction bool,
            GenreAdventure bool,
            GenreAnimation bool,
            GenreChildrens bool,
            GenreComedy bool,
            GenreCrime bool,
            GenreDocumentary bool,
            GenreDrama bool,
            GenreFantasy bool,
            GenreNoire bool,
            GenreHorror bool,
            GenreMusical bool,
            GenreMystery bool,
            GenreRomance bool,
            GenreSciFi bool,
            GenreThriller bool,
            GenreWar bool,
            GenreWestern bool
    FROM @movieDataFilePath
    USING new PopularMoviesCommon.Extractors.MoviesInfoExtractor(colDelim: '|');

/* 
=========================================================================================================
PART III: Join extracted movies info data with calculated avg. ratings (notice x.UpperMe custom function)
=========================================================================================================
*/ 
@moviesInfoWithRatings =
    SELECT i.MovieId AS InfoMovieId, 
		   x.UpperMe(i.Title) AS Title, 
		   r.NumberOfRatings, 
		   r.AvgRating
    FROM @moviesInfo AS i
         INNER JOIN
         (
         SELECT MovieId AS MovieId,
                NumberOfRatings,
				AvgRating
         FROM @ratingsCountPerMovie
               ) AS r
         ON i.MovieId == r.MovieId;

/* 
=========================================================================================================
PART IV: Output combined data to csv file (moviesInfoWithRatings.csv) using built in csv outputter
=========================================================================================================
*/ 
OUTPUT @moviesInfoWithRatings
TO @moviesRatingOutputFilePath
ORDER BY AvgRating DESC, NumberOfRatings DESC
USING Outputters.Csv();