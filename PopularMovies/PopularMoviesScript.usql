REFERENCE ASSEMBLY master.PopularMoviesCommon;

//USING x = PopularMoviesCommon.CustomFunctions;
USING y = PopularMoviesCommon.Extractors.MoviesInfoExtractor;

DECLARE @movieRatingsFilePath = "/u.data";
DECLARE @movieDataFilePath = "/u100k.item";

// extract all ratings data from file
//@moviesRatings =
//    EXTRACT UserId int,
//            MovieId int,
//            Rating int,
//			Timestamp double
//    FROM @movieRatingsFilePath
//    USING Extractors.Tsv();

// count ratings per movie
//@ratingsCountPerMovie =
//    SELECT MovieId,
//           COUNT( * ) AS NumberOfRatings
//    FROM @moviesRatings
//    GROUP BY MovieId;

//@timestampParsed =
//    SELECT UserId,
//           MovieId,
//           Rating,
////           PopularMovies.CustomFunctions.ParseUnixTimestampCodeBehind(Timestamp) AS ParsedUnixTimestamp
//          x.UnixTimeStampToDateTime(Timestamp).ToString("yyyy.MM.dd HH:mm") AS ParsedUnixTimestamp
//    FROM @moviesRatings;

//get movies info
@moviesInfo =
    EXTRACT MovieId int,
            Title string,
            ReleaseDate DateTime,
            VideoReleaseDate DateTime?,
            IMDbURL string,
            GenreUnknown bool,
            GenreAction bool,
            GenreAdventure bool,
            GenreAnimation bool,
            GenreChildrens bool,
            GenreComedy bool,
            GenreCrime bool,
            GenreDocumentary bool,
            GenreDrama bool,
            GenreFantasy bool,
            GenreNoire bool,
            GenreHorror bool,
            GenreMusical bool,
            GenreMystery bool,
            GenreRomance bool,
            GenreSciFi bool,
            GenreThriller bool,
            GenreWar bool,
            GenreWestern bool
    FROM @movieDataFilePath
    USING new PopularMoviesCommon.Extractors.MoviesInfoExtractor(colDelim: '|');
			
OUTPUT @moviesInfo
TO "/moviesInfo.csv"
//ORDER BY NumberOfRatings DESC FETCH 10 ROWS
USING Outputters.Csv();