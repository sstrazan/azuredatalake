/*
DESCRIPTION:
	This U-SQL script process 2 files containing movies rating informations 
	(downloadable from https://grouplens.org/datasets/movielens/):
		- ratings.csv - comma separated file that contains 20 000 000 movies ratings (user id, movie id, rating, timestamp)
		- movies.csv - comma separated file that contains general movies info (movie id, title, release date, 
					genres, ...)
	Script process files in a way that it calculates avg. ratings for movies (from ratings.csv) and combines 
	this with movies general informations (from movies.csv)	producing comma separated file 
	(moveisInfoWithRatings20m.csv) that contains combined data.
*/

REFERENCE ASSEMBLY master.PopularMoviesCommon;

USING x = PopularMoviesCommon.Helpers.CustomFunctions;

DECLARE EXTERNAL @intervalBasedSubdir string = "";
DECLARE @movieRatingsFilePath = "/moviesdata/onpremisesdata/" + @intervalBasedSubdir + "ratings.csv";
DECLARE @movieDataFilePath = "/moviesdata/onpremisesdata/" + @intervalBasedSubdir + "movies.csv";
DECLARE @moviesRatingOutputFilePath = "/moviesdata/outputdata/" + @intervalBasedSubdir + "moviesInfoWithRatings20m.csv";

/* 
=========================================================================================================
PART I: Extract and transform movie ratings file using built in csv extractor (notice skipFirstNRows param)
=========================================================================================================
*/ 

// extract all ratings data from file
@moviesRatings =
    EXTRACT UserId int,
            MovieId int,
            Rating decimal,
			Timestamp double
    FROM @movieRatingsFilePath
    USING Extractors.Csv(skipFirstNRows: 1);

// count ratings and calculate average rating per movie (notice SQL-like syntax)
@ratingsCountPerMovie =
    SELECT MovieId,
           COUNT(*) AS NumberOfRatings,
		   AVG((decimal) Rating) AS AvgRating
    FROM @moviesRatings
    GROUP BY MovieId;

// rowset can be refined - here we round avg. rating (notice .NET Math.Round)
@ratingsCountPerMovie =
    SELECT MovieId,
           NumberOfRatings,
           Math.Round((decimal)AvgRating, 2) AS AvgRating
    FROM @ratingsCountPerMovie;

/* 
=========================================================================================================
PART II: Extract movies info file (movies.csv) using built in csv extractor (notice skipFirstNRows param)
=========================================================================================================
*/ 

//extract movies info
@moviesInfo =
    EXTRACT MovieId int,
            Title string,
			Genres string
    FROM @movieDataFilePath
    USING Extractors.Csv(skipFirstNRows: 1);

/* 
=========================================================================================================
PART III: Join extracted movies info data with calculated avg. ratings (notice x.UpperMe custom function)
=========================================================================================================
*/ 
@moviesInfoWithRatings =
    SELECT i.MovieId AS InfoMovieId, 
		   x.UpperMe(i.Title) AS Title, 
		   r.NumberOfRatings, 
		   r.AvgRating
    FROM @moviesInfo AS i
         INNER JOIN
         (
         SELECT MovieId AS MovieId,
                NumberOfRatings,
				AvgRating
         FROM @ratingsCountPerMovie
               ) AS r
         ON i.MovieId == r.MovieId;

/* 
=========================================================================================================
PART IV: Output combined data to csv file (moviesInfoWithRatings20m.csv) using built in csv outputter
=========================================================================================================
*/ 
OUTPUT @moviesInfoWithRatings
TO @moviesRatingOutputFilePath
ORDER BY AvgRating DESC, NumberOfRatings DESC
USING Outputters.Csv();